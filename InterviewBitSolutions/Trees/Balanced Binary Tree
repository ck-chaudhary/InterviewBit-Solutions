/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 int max(int a, int b) 
{ 
  return (a >= b)? a: b; 
} 
int height(TreeNode* node) 
{ 
   /* base case tree is empty */
   if(node == NULL) 
       return 0; 
  
   /* If tree is not empty then height = 1 + max of left 
      height and right heights */
   return 1 + max(height(node->left), height(node->right)); 
}

int Solution::isBalanced(TreeNode* A) {
    if(!A)
    return 1;
    int lh = isBalanced(A->left);
    int rh = isBalanced(A->right);
    if(abs(lh - rh) <=1 && isBalanced(A->left) && isBalanced(A->right))
    return 1;
    
    return 0;
}
